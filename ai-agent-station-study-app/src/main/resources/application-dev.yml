server:
  port: 8091

# 线程池配置
thread:
  pool:
    executor:
      config:
        core-pool-size: 20
        max-pool-size: 50
        keep-alive-time: 5000
        block-queue-size: 5000
        policy: CallerRunsPolicy

# 多数据源配置
spring:
  # MySQL业务数据源配置
  datasource:
    mysql:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://127.0.0.1:13306/ai_agent_station?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
      username: root
      password: 123456
      hikari:
        pool-name: MySQL_HikariCP
        minimum-idle: 5
        idle-timeout: 30000
        maximum-pool-size: 10
        auto-commit: true
        max-lifetime: 1800000
        connection-timeout: 30000
        connection-test-query: SELECT 1
    # PgVector向量数据源配置
    pgvector:
      driver-class-name: org.postgresql.Driver
      url: jdbc:postgresql://127.0.0.1:15432/ai-rag-knowledge
      username: postgres
      password: postgres
      hikari:
        pool-name: PgVector_HikariCP
        minimum-idle: 2
        idle-timeout: 30000
        maximum-pool-size: 5
        auto-commit: true
        max-lifetime: 1800000
        connection-timeout: 30000
        connection-test-query: SELECT 1
  ai:
    openai:
      base-url: https://yunwu.ai
      api-key: sk-mWDhedqMplSqa0tE5ufbWwaLff0XV9h4j5AU0PE05skrQmXV
      request-timeout: 60s  # 🕒 设置60秒请求超时，解决复杂AI任务超时问题
    vectorstore:
      pgvector:
        table-name: vector_store_openai
        schema-name: public
    agent:
      auto-config:
        enabled: true
        client-ids: 3101,3102,3103,3104  # 🤖 自动装配AI客户端ID列表
  # WebClient全局超时配置
  webflux:
    timeout: 60s  # 🕒 WebFlux响应式客户端超时设置

# MyBatis 配置
mybatis:
  mapper-locations: classpath:/mybatis/mapper/*.xml
  config-location: classpath:/mybatis/config/mybatis-config.xml

# 日志
logging:
  level:
    root: info
  config: classpath:logback-spring.xml